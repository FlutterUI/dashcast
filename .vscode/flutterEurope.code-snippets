{
	"newPoints": {
		"scope": "dart",
		"prefix": "newPoints",
		"body": [
			"/// Modifies each point randomly by a maximum of +/- [maxDiff] pixels",
			"void _newPoints() {",
			"  // The maximum number of pixels that points on a random wave can change by.",
			"  final maxDiff = 3.0;",
			"  Random r = Random();",
			"  for (int i = 0; i < _points.length; i++) {",
			"    var point = _points[i];",
			"",
			"    // Generate a random number between  -maxDiff and +maxDiff",
			"    double diff = maxDiff - r.nextDouble() * maxDiff * 2.0;",
			"",
			"    // Ensure that point is constrained between 0 and the size of the container",
			"    double newY = max(0.0, point.dy + diff);",
			"    newY = min(widget.size.height, newY);",
			"",
			"    Offset newPoint = Offset(point.dx, newY);",
			"    _points[i] = newPoint;",
			"  }",
			"}"
		],
		"description": "Function for generating new set of points for clippath animation"
	},
	"initPoints": {
		"scope": "dart",
		"prefix": "initPoints",
		"body": [
			"  Random r = Random();",
			"  for (int i = 0; i < widget.size.width; i++) {",
			"    double x = i.toDouble();",
			"",
			"    // Set this point's y-coordinate to a random value",
			"    // no greater than 80% of the container's height",
			"    double y = r.nextDouble() * (widget.size.height * 0.8);",
			"",
			"    _points.add(Offset(x, y));",
			"  }",
		],
		"description": "Function for generating the initial set of points for clippath animation"
	},
	"Add points and modify points": {
		"scope": "dart",
		"prefix": "controllerPoints",
		"body": [
			"_controller.addListener(_newPoints);",
			"_initPoints();",
		],
		"description": "Function for generating the initial set of points for clippath animation"
	},
	"Leading Image": {
		"scope": "dart",
		"prefix": "leadingImage",
		"body": [
			"class LeadingImage extends StatelessWidget {",
			"  final _defaultOpacity = 0.15;",
			"",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    final podcast = Provider.of<Podcast>(context);",
			"    return ClipOval(",
			"      child: Image.network(podcast.feed.image.url),",
			"    );",
			"  }",
			"",
			"  double _getOpacity(double percentDownloaded) =>",
			"      percentDownloaded * (1 - _defaultOpacity) + _defaultOpacity;",
			"}",
		],
		"description": "ClipOval on the podcast image."
	},
	"animate opacity": {
		"scope": "dart",
		"prefix": "animOpacity",
		"body": [
			"duration: Duration(milliseconds: 100),",
			"opacity: _getOpacity()"
		],
		"description": "add method for getting the opacity"
	},
	"getOpacity": {
		"scope": "dart",
		"prefix": "getOpacity",
		"body": [
			"double _getOpacity(double percentDownloaded) =>",
			"    percentDownloaded * (1 - _defaultOpacity) + _defaultOpacity;"
		],
		"description": "add method for getting the opacity"
	},
	// TODO: snippet for animated opacity's duration + opacity
	"Podcast provider": {
		"scope": "dart",
		"prefix": "podcastProvider",
		"body": [
			"final podcast = Provider.of<Podcast>(context)"
		],
		"description": "add declaration for getting podcast provider"
	},
	"Episode provider": {
		"scope": "dart",
		"prefix": "episodeProvider",
		"body": [
			"final episode = Provider.of<Episode>(context);"
		],
		"description": "add declaration for getting episode provider"
	},
	"Download Status for AlertWiggle": {
		"scope": "dart",
		"prefix": "downloadStatus",
		"body": [
			"if (episode.percentDownloaded == 1 && !episode.hasNotifiedDownloaded) {",
			"  _endValue = sinePeriod;",
			"  episode.downloadNotified();",
			"}"
		],
		"description": "check download status for AlertWiggle"
	},
	"Wiggle Transform": {
		"scope": "dart",
		"prefix": "wiggleTransform",
		"body": [
			"  double offset = sin(value);",
			"  return Transform.translate(",
			"    offset: Offset(offset, offset * 2),",
			"    child: child,",
			"  );",
		],
		"description": "Transform helper function for a wiggle."
	},
	"Elevated Material": {
		"scope": "dart",
		"prefix": "materialElevate",
		"body": [
			"Material(",
			"  shape: RoundedRectangleBorder(",
			"    borderRadius: BorderRadius.circular(5),",
			"  ),",
			"  elevation: value == 0 || value == _endValue ? 0 : 3,",
			"  child: child,",
			")",
		],
		"description": "Add material elvation (i.e., a shadow) to a child widget"
	},
	"Animation Builder for Wave": {
		"prefix": "builder",
		"scope": "dart",
		"body": [
			"AnimatedBuilder(",
			"  animation: _controller,",
			"  child: OpacityOverlay(),",
			"  builder: (BuildContext context, Widget child) {",
			"    return ClipPath(",
			"      clipper: WaveClipper(_controller.value, _points),",
			"      child: child,",
			"    );",
			"  },",
			"),",
		],
		"description": "animated builder",
	},
	"tweenAni": {
		"scope": "dart",
		"prefix": "tweenAni",
		"body": [
			"return TweenAnimationBuilder(",
			"  tween: Tween<double>(begin: 0, end: 1),",
			"  duration: Duration(milliseconds: 200),",
			"  child: child,",
			"  builder: (_, double value, Widget child) {",
			"    return child;",
			"  },",
			");",
		]
	},
	// Place your dashcast workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	//   "scope": "javascript,typescript",
	//   "prefix": "log",
	//   "body": [
	//     "console.log('$1');",
	//     "$2"
	//   ],
	//   "description": "Log output to console"
	// }
}